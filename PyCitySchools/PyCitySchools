PyCity Schools Analysis
As a whole, schools with higher budgets, did not yield better test results. By contrast, schools with higher spending 645-675 per student actually underperformed compared to schools with smaller budgets (585 per student).
As a whole, smaller and medium sized schools dramatically out-performed large sized schools on passing math performances (89-91% passing vs 67%).
As a whole, charter schools out-performed the public district schools across all metrics. However, more analysis will be required to glean if the effect is due to school practices or the fact that charter schools tend to serve smaller student populations per school.
In [1]:

# Dependencies and Setup
import pandas as pd
from pathlib import Path
​
# File to Load (Remember to Change These)
school_data_to_load = Path("Resources/schools_complete.csv")
student_data_to_load = Path("Resources/students_complete.csv")
​
# Read School and Student Data File and store into Pandas DataFrames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)
​
# Combine the data into a single dataset.  
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])
school_data_complete
Out[1]:
Student ID	student_name	gender	grade	school_name	reading_score	math_score	School ID	type	size	budget
0	0	Paul Bradley	M	9th	Huang High School	66	79	0	District	2917	1910635
1	1	Victor Smith	M	12th	Huang High School	94	61	0	District	2917	1910635
2	2	Kevin Rodriguez	M	12th	Huang High School	90	60	0	District	2917	1910635
3	3	Dr. Richard Scott	M	12th	Huang High School	67	58	0	District	2917	1910635
4	4	Bonnie Ray	F	9th	Huang High School	97	84	0	District	2917	1910635
...	...	...	...	...	...	...	...	...	...	...	...
39165	39165	Donna Howard	F	12th	Thomas High School	99	90	14	Charter	1635	1043130
39166	39166	Dawn Bell	F	10th	Thomas High School	95	70	14	Charter	1635	1043130
39167	39167	Rebecca Tanner	F	9th	Thomas High School	73	84	14	Charter	1635	1043130
39168	39168	Desiree Kidd	F	10th	Thomas High School	99	90	14	Charter	1635	1043130
39169	39169	Carolyn Jackson	F	11th	Thomas High School	95	75	14	Charter	1635	1043130
39170 rows × 11 columns
District Summary
In [2]:

# Calculate the total number of unique schools
school_count = len(school_data_complete["school_name"].unique())
school_count_total = school_data_complete["Student ID"].count()
school_count_total
Out[2]:
39170
In [3]:

# Calculate the total number of students #correct
student_count = school_data_complete["Student ID"].nunique()
student_count
Out[3]:
39170
In [4]:

# Calculate the total budget
total_budget = school_data_complete["budget"].unique().sum()
total_budget
​
Out[4]:
24649428
In [5]:

# Calculate the average (mean) math score
average_math_score = school_data_complete["math_score"].sum()/len(school_data_complete["math_score"])
average_math_score
Out[5]:
78.98537145774827
In [6]:

# Calculate the average (mean) reading score
average_reading_score = school_data_complete["reading_score"].sum()/len(school_data_complete["reading_score"])
average_reading_score
Out[6]:
81.87784018381414
In [7]:

# Use the following to calculate the percentage of students who passed math (math scores greather than or equal to 70)
passing_math_count = school_data_complete[(school_data_complete["math_score"] >= 70)].count()["student_name"]
passing_math_percentage = passing_math_count / float(student_count) * 100
passing_math_percentage
Out[7]:
74.9808526933878
In [8]:

# Calculate the percentage of students who passeed reading (hint: look at how the math percentage was calculated)  
student_count = school_data_complete["Student ID"].nunique()
passing_reading_count = school_data_complete[(school_data_complete["reading_score"] >= 70)].count()["student_name"]
passing_reading_percentage = passing_reading_count / float(student_count) * 100
passing_reading_percentage
Out[8]:
85.80546336482001
In [9]:

# Use the following to calculate the percentage of students that passed math and reading
passing_math_reading_count = school_data_complete[
    (school_data_complete["math_score"] >= 70) & (school_data_complete["reading_score"] >= 70)
].count()["student_name"]
overall_passing_rate = passing_math_reading_count / float(student_count) * 100
overall_passing_rate
Out[9]:
65.17232575950983
In [10]:

​
##Checl % overall passing and total schools
average_math_score = school_data_complete["math_score"].mean()
average_reading_score = school_data_complete["reading_score"].mean()
overall_passing_rate = (average_math_score + average_reading_score)/2
​
# Create a high-level snapshot of the district's key metrics in a DataFrame
​
​
district_summary = pd.DataFrame(
          [{"Total Schools": school_count, 
          "Total Students": student_count, 
          "Total Budget": total_budget,
          "Average Math Score": average_math_score, 
        "Average Reading Score": average_reading_score,
          "% Passing Math": passing_math_percentage,
         "% Passing Reading": passing_reading_percentage,
            "%Overall Passing Rate" : overall_passing_rate
      }])
​
​
# Formatting
district_summary["Total Students"] = district_summary["Total Students"].map("{:,}".format)
district_summary["Total Budget"] = district_summary["Total Budget"].map("${:,.2f}".format)
​
# Display the DataFrame
district_summary
Out[10]:
Total Schools	Total Students	Total Budget	Average Math Score	Average Reading Score	% Passing Math	% Passing Reading	%Overall Passing Rate
0	15	39,170	$24,649,428.00	78.985371	81.87784	74.980853	85.805463	80.431606
School Summary
In [11]:

# Use the code provided to select the school type
school_types = school_data.set_index(["school_name"])["type"]
In [12]:

# Calculate the total student count
per_school_counts = school_data_complete['student_name'].count()
​
In [13]:

# Calculate the total school budget and per capita spending
per_school_budget = school_data_complete.groupby(["school_name"]).mean()["budget"]
per_school_capita = per_school_budget / per_school_counts
​
​
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/618975843.py:2: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  per_school_budget = school_data_complete.groupby(["school_name"]).mean()["budget"]
In [14]:

# Calculate the average test scores
per_school_math = school_data_complete.groupby(["school_name"]).mean()["math_score"]
per_school_reading = school_data_complete.groupby(["school_name"]).mean()["reading_score"]
per_school_math
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/1177522698.py:2: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  per_school_math = school_data_complete.groupby(["school_name"]).mean()["math_score"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/1177522698.py:3: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  per_school_reading = school_data_complete.groupby(["school_name"]).mean()["reading_score"]
Out[14]:
school_name
Bailey High School       77.048432
Cabrera High School      83.061895
Figueroa High School     76.711767
Ford High School         77.102592
Griffin High School      83.351499
Hernandez High School    77.289752
Holden High School       83.803279
Huang High School        76.629414
Johnson High School      77.072464
Pena High School         83.839917
Rodriguez High School    76.842711
Shelton High School      83.359455
Thomas High School       83.418349
Wilson High School       83.274201
Wright High School       83.682222
Name: math_score, dtype: float64
In [15]:

# Calculate the number of schools with math scores of 70 or higherco
school_passing_math = school_data_complete[(school_data_complete["math_score"] >= 70)]
In [16]:

# Calculate the number of schools with reading scores of 70 or higher
school_passing_reading = school_data_complete[(school_data_complete["reading_score"] >= 70)]
​
In [17]:

# Use the provided code to calculate the schools that passed both math and reading with scores of 70 or higher
passing_math_and_reading = school_data_complete[
    (school_data_complete["reading_score"] >= 70) & (school_data_complete["math_score"] >= 70)]
passing_math_and_reading
​
Out[17]:
Student ID	student_name	gender	grade	school_name	reading_score	math_score	School ID	type	size	budget
4	4	Bonnie Ray	F	9th	Huang High School	97	84	0	District	2917	1910635
5	5	Bryan Miranda	M	9th	Huang High School	94	94	0	District	2917	1910635
6	6	Sheena Carter	F	11th	Huang High School	82	80	0	District	2917	1910635
8	8	Michael Roth	M	10th	Huang High School	95	87	0	District	2917	1910635
9	9	Matthew Greene	M	10th	Huang High School	96	84	0	District	2917	1910635
...	...	...	...	...	...	...	...	...	...	...	...
39165	39165	Donna Howard	F	12th	Thomas High School	99	90	14	Charter	1635	1043130
39166	39166	Dawn Bell	F	10th	Thomas High School	95	70	14	Charter	1635	1043130
39167	39167	Rebecca Tanner	F	9th	Thomas High School	73	84	14	Charter	1635	1043130
39168	39168	Desiree Kidd	F	10th	Thomas High School	99	90	14	Charter	1635	1043130
39169	39169	Carolyn Jackson	F	11th	Thomas High School	95	75	14	Charter	1635	1043130
25528 rows × 11 columns
In [18]:

# Use the provided code to calculate the passing rates
##pd.DataFame
per_school_passing_math = school_passing_math.groupby(["school_name"]).count()["student_name"]/per_school_counts * 100
per_school_passing_reading = school_passing_reading.groupby(["school_name"]).count()["student_name"] /per_school_counts * 100
overall_passing_rate = passing_math_and_reading.groupby(["school_name"]).count()["student_name"] /per_school_counts * 100
​
​
In [19]:

# Create a DataFrame called `per_school_summary` with columns for the calculations above.
per_school_summary = pd.DataFrame({"School Type": school_types,
                                  "Total Students": per_school_counts,
                                  "Total School Budget": per_school_budget,
                                  "Per Student Budget": per_school_capita,
                                  "Average Math Score": per_school_math,
                                  "Average Reading Score": per_school_reading,
                                  "% Passing Math" : per_school_passing_math,
                                  "% Passing Reading" : per_school_passing_reading,
                                  "% Overall Passing" : overall_passing_rate})
​
# Formatting
per_school_summary["Total School Budget"] = per_school_summary["Total School Budget"].map("${:,.2f}".format)
per_school_summary["Per Student Budget"] = per_school_summary["Per Student Budget"].map("${:,.2f}".format)
​
# Display the DataFrame
per_school_summary
Out[19]:
School Type	Total Students	Total School Budget	Per Student Budget	Average Math Score	Average Reading Score	% Passing Math	% Passing Reading	% Overall Passing
school_name									
Bailey High School	District	39170	$3,124,928.00	$79.78	77.048432	81.033963	8.470768	10.408476	6.941537
Cabrera High School	Charter	39170	$1,081,356.00	$27.61	83.061895	83.975780	4.465152	4.603013	4.332397
Figueroa High School	District	39170	$1,884,411.00	$48.11	76.711767	81.158020	4.968088	6.078632	4.005617
Ford High School	District	39170	$1,763,916.00	$45.03	77.102592	80.746258	4.776615	5.545060	3.796273
Griffin High School	Charter	39170	$917,500.00	$23.42	83.351499	83.816757	3.500128	3.640541	3.395456
Hernandez High School	District	39170	$3,022,020.00	$77.15	77.289752	80.934412	7.898902	9.568547	6.333929
Holden High School	Charter	39170	$248,087.00	$6.33	83.803279	83.814988	1.008425	1.049272	0.972683
Huang High School	District	39170	$1,910,635.00	$48.78	76.629414	81.182722	4.891499	6.055655	3.985193
Johnson High School	District	39170	$3,094,650.00	$79.01	77.072464	80.966394	8.029104	9.872351	6.507531
Pena High School	Charter	39170	$585,858.00	$14.96	83.839917	84.044699	2.323207	2.356395	2.223641
Rodriguez High School	District	39170	$2,547,363.00	$65.03	76.842711	80.744686	6.775594	8.189941	5.409752
Shelton High School	Charter	39170	$1,056,600.00	$26.97	83.359455	83.725724	4.220066	4.309420	4.041358
Thomas High School	Charter	39170	$1,043,130.00	$26.63	83.418349	83.848930	3.893286	4.061782	3.796273
Wilson High School	Charter	39170	$1,319,574.00	$33.69	83.274201	83.989488	5.471024	5.626755	5.279551
Wright High School	Charter	39170	$1,049,400.00	$26.79	83.682222	83.955000	4.288997	4.439622	4.151136
Highest-Performing Schools (by % Overall Passing)
In [20]:

# Sort the schools by `% Overall Passing` in descending order and display the top 5 rows.
top_schools = per_school_summary.sort_values(["% Overall Passing"], ascending=False)
top_schools.head(5)
Out[20]:
School Type	Total Students	Total School Budget	Per Student Budget	Average Math Score	Average Reading Score	% Passing Math	% Passing Reading	% Overall Passing
school_name									
Bailey High School	District	39170	$3,124,928.00	$79.78	77.048432	81.033963	8.470768	10.408476	6.941537
Johnson High School	District	39170	$3,094,650.00	$79.01	77.072464	80.966394	8.029104	9.872351	6.507531
Hernandez High School	District	39170	$3,022,020.00	$77.15	77.289752	80.934412	7.898902	9.568547	6.333929
Rodriguez High School	District	39170	$2,547,363.00	$65.03	76.842711	80.744686	6.775594	8.189941	5.409752
Wilson High School	Charter	39170	$1,319,574.00	$33.69	83.274201	83.989488	5.471024	5.626755	5.279551
Bottom Performing Schools (By % Overall Passing)
In [21]:

# Sort the schools by `% Overall Passing` in ascending order and display the top 5 rows.
bottom_schools = per_school_summary.sort_values(["% Overall Passing"], ascending= True)
bottom_schools.head(5)
Out[21]:
School Type	Total Students	Total School Budget	Per Student Budget	Average Math Score	Average Reading Score	% Passing Math	% Passing Reading	% Overall Passing
school_name									
Holden High School	Charter	39170	$248,087.00	$6.33	83.803279	83.814988	1.008425	1.049272	0.972683
Pena High School	Charter	39170	$585,858.00	$14.96	83.839917	84.044699	2.323207	2.356395	2.223641
Griffin High School	Charter	39170	$917,500.00	$23.42	83.351499	83.816757	3.500128	3.640541	3.395456
Ford High School	District	39170	$1,763,916.00	$45.03	77.102592	80.746258	4.776615	5.545060	3.796273
Thomas High School	Charter	39170	$1,043,130.00	$26.63	83.418349	83.848930	3.893286	4.061782	3.796273
Math Scores by Grade
In [22]:

# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]
​
# Group by "school_name" and take the mean of each.
ninth_graders_scores = ninth_graders.groupby(["school_name"]).mean()
tenth_graders_scores = tenth_graders.groupby(["school_name"]).mean()
eleventh_graders_scores = eleventh_graders.groupby(["school_name"]).mean()
twelfth_graders_scores = twelfth_graders.groupby(["school_name"]).mean()
​
# Use the code to select only the `math_score`.
ninth_grader_math_scores = ninth_graders_scores["math_score"]
tenth_grader_math_scores = tenth_graders_scores["math_score"]
eleventh_grader_math_scores = eleventh_graders_scores["math_score"]
twelfth_grader_math_scores = twelfth_graders_scores["math_score"]
​
# Combine each of the scores above into single DataFrame called `math_scores_by_grade`
math_scores_by_grade = pd.DataFrame({"9th": ninth_grader_math_scores, "10th": tenth_grader_math_scores, 
                                     "11th": eleventh_grader_math_scores,
                                    "12th": twelfth_grader_math_scores})
​
​
# Minor data wrangling
math_scores_by_grade.index.name = None
​
# Display the DataFrame
math_scores_by_grade
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/2387610641.py:8: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  ninth_graders_scores = ninth_graders.groupby(["school_name"]).mean()
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/2387610641.py:9: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  tenth_graders_scores = tenth_graders.groupby(["school_name"]).mean()
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/2387610641.py:10: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  eleventh_graders_scores = eleventh_graders.groupby(["school_name"]).mean()
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/2387610641.py:11: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  twelfth_graders_scores = twelfth_graders.groupby(["school_name"]).mean()
Out[22]:
9th	10th	11th	12th
Bailey High School	77.083676	76.996772	77.515588	76.492218
Cabrera High School	83.094697	83.154506	82.765560	83.277487
Figueroa High School	76.403037	76.539974	76.884344	77.151369
Ford High School	77.361345	77.672316	76.918058	76.179963
Griffin High School	82.044010	84.229064	83.842105	83.356164
Hernandez High School	77.438495	77.337408	77.136029	77.186567
Holden High School	83.787402	83.429825	85.000000	82.855422
Huang High School	77.027251	75.908735	76.446602	77.225641
Johnson High School	77.187857	76.691117	77.491653	76.863248
Pena High School	83.625455	83.372000	84.328125	84.121547
Rodriguez High School	76.859966	76.612500	76.395626	77.690748
Shelton High School	83.420755	82.917411	83.383495	83.778976
Thomas High School	83.590022	83.087886	83.498795	83.497041
Wilson High School	83.085578	83.724422	83.195326	83.035794
Wright High School	83.264706	84.010288	83.836782	83.644986
Reading Score by Grade
In [23]:

# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]
​
# Group by "school_name" and take the mean of each.
ninth_graders_scores = ninth_graders.groupby(["school_name"]).mean()
tenth_graders_scores = tenth_graders.groupby(["school_name"]).mean()
eleventh_graders_scores = eleventh_graders.groupby(["school_name"]).mean()
twelfth_graders_scores = twelfth_graders.groupby(["school_name"]).mean()
​
# Use the code to select only the `reading_score`.
ninth_grader_reading_scores = ninth_graders_scores["reading_score"]
tenth_grader_reading_scores = tenth_graders_scores["reading_score"]
eleventh_grader_reading_scores = eleventh_graders_scores["reading_score"]
twelfth_grader_reading_scores = twelfth_graders_scores["reading_score"]
​
# Combine each of the scores above into single DataFrame called `reading_scores_by_grade`
reading_scores_by_grade = pd.DataFrame({"9th": ninth_grader_reading_scores, "10th": tenth_grader_reading_scores, 
                                     "11th": eleventh_grader_reading_scores,
                                    "12th": twelfth_grader_reading_scores})
​
​
# Minor data wrangling
reading_scores_by_grade = reading_scores_by_grade[["9th", "10th", "11th", "12th"]]
reading_scores_by_grade.index.name = None
​
# Display the DataFrame
reading_scores_by_grade
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/3192765264.py:8: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  ninth_graders_scores = ninth_graders.groupby(["school_name"]).mean()
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/3192765264.py:9: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  tenth_graders_scores = tenth_graders.groupby(["school_name"]).mean()
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/3192765264.py:10: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  eleventh_graders_scores = eleventh_graders.groupby(["school_name"]).mean()
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/3192765264.py:11: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  twelfth_graders_scores = twelfth_graders.groupby(["school_name"]).mean()
Out[23]:
9th	10th	11th	12th
Bailey High School	81.303155	80.907183	80.945643	80.912451
Cabrera High School	83.676136	84.253219	83.788382	84.287958
Figueroa High School	81.198598	81.408912	80.640339	81.384863
Ford High School	80.632653	81.262712	80.403642	80.662338
Griffin High School	83.369193	83.706897	84.288089	84.013699
Hernandez High School	80.866860	80.660147	81.396140	80.857143
Holden High School	83.677165	83.324561	83.815534	84.698795
Huang High School	81.290284	81.512386	81.417476	80.305983
Johnson High School	81.260714	80.773431	80.616027	81.227564
Pena High School	83.807273	83.612000	84.335938	84.591160
Rodriguez High School	80.993127	80.629808	80.864811	80.376426
Shelton High School	84.122642	83.441964	84.373786	82.781671
Thomas High School	83.728850	84.254157	83.585542	83.831361
Wilson High School	83.939778	84.021452	83.764608	84.317673
Wright High School	83.833333	83.812757	84.156322	84.073171
Scores by School Spending
In [24]:

# Establish the bins 
spending_bins = [0, 585, 630, 645, 680]
labels = ["<$585", "$585-630", "$630-645", "$645-680"]
In [ ]:

​
In [25]:

# Create a copy of the school summary since it has the "Per Student Budget" 
school_spending_df = per_school_summary.copy()
In [26]:

# Use `pd.cut` to categorize spending based on the bins.
school_spending_df["Spending Ranges (Per Student)"] = pd.cut(per_school_capita, bins = spending_bins , labels = labels)
school_spending_df
Out[26]:
School Type	Total Students	Total School Budget	Per Student Budget	Average Math Score	Average Reading Score	% Passing Math	% Passing Reading	% Overall Passing	Spending Ranges (Per Student)
school_name										
Bailey High School	District	39170	$3,124,928.00	$79.78	77.048432	81.033963	8.470768	10.408476	6.941537	<$585
Cabrera High School	Charter	39170	$1,081,356.00	$27.61	83.061895	83.975780	4.465152	4.603013	4.332397	<$585
Figueroa High School	District	39170	$1,884,411.00	$48.11	76.711767	81.158020	4.968088	6.078632	4.005617	<$585
Ford High School	District	39170	$1,763,916.00	$45.03	77.102592	80.746258	4.776615	5.545060	3.796273	<$585
Griffin High School	Charter	39170	$917,500.00	$23.42	83.351499	83.816757	3.500128	3.640541	3.395456	<$585
Hernandez High School	District	39170	$3,022,020.00	$77.15	77.289752	80.934412	7.898902	9.568547	6.333929	<$585
Holden High School	Charter	39170	$248,087.00	$6.33	83.803279	83.814988	1.008425	1.049272	0.972683	<$585
Huang High School	District	39170	$1,910,635.00	$48.78	76.629414	81.182722	4.891499	6.055655	3.985193	<$585
Johnson High School	District	39170	$3,094,650.00	$79.01	77.072464	80.966394	8.029104	9.872351	6.507531	<$585
Pena High School	Charter	39170	$585,858.00	$14.96	83.839917	84.044699	2.323207	2.356395	2.223641	<$585
Rodriguez High School	District	39170	$2,547,363.00	$65.03	76.842711	80.744686	6.775594	8.189941	5.409752	<$585
Shelton High School	Charter	39170	$1,056,600.00	$26.97	83.359455	83.725724	4.220066	4.309420	4.041358	<$585
Thomas High School	Charter	39170	$1,043,130.00	$26.63	83.418349	83.848930	3.893286	4.061782	3.796273	<$585
Wilson High School	Charter	39170	$1,319,574.00	$33.69	83.274201	83.989488	5.471024	5.626755	5.279551	<$585
Wright High School	Charter	39170	$1,049,400.00	$26.79	83.682222	83.955000	4.288997	4.439622	4.151136	<$585
In [27]:

#  Calculate averages for the desired columns. 
spending_math_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"]).mean()["Average Math Score"]
spending_reading_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"]).mean()["Average Reading Score"]
spending_passing_math = school_spending_df.groupby(["Spending Ranges (Per Student)"]).mean()["% Passing Math"]
spending_passing_reading = school_spending_df.groupby(["Spending Ranges (Per Student)"]).mean()["% Passing Reading"]
overall_passing_spending = school_spending_df.groupby(["Spending Ranges (Per Student)"]).mean()["% Overall Passing"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/4149390191.py:2: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  spending_math_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"]).mean()["Average Math Score"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/4149390191.py:3: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  spending_reading_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"]).mean()["Average Reading Score"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/4149390191.py:4: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  spending_passing_math = school_spending_df.groupby(["Spending Ranges (Per Student)"]).mean()["% Passing Math"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/4149390191.py:5: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  spending_passing_reading = school_spending_df.groupby(["Spending Ranges (Per Student)"]).mean()["% Passing Reading"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/4149390191.py:6: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  overall_passing_spending = school_spending_df.groupby(["Spending Ranges (Per Student)"]).mean()["% Overall Passing"]
In [28]:

# Assemble into DataFrame
spending_summary = pd.DataFrame ({"Spending Math Scores":spending_math_scores, "Spending Reading Scores" : spending_reading_scores,
                            
                                  "Spending Passing Math": spending_passing_math,
                                  "Spending Passing Reading" :spending_passing_reading,
                                  "Overall Passing Spending" :overall_passing_spending 
                                 })
​
# Display results
spending_summary
Out[28]:
Spending Math Scores	Spending Reading Scores	Spending Passing Math	Spending Passing Reading	Overall Passing Spending
Spending Ranges (Per Student)					
<$585	80.43253	82.529188	4.998724	5.720364	4.344822
$585-630	NaN	NaN	NaN	NaN	NaN
$630-645	NaN	NaN	NaN	NaN	NaN
$645-680	NaN	NaN	NaN	NaN	NaN
Scores by School Size
In [29]:

# Establish the bins.
size_bins = [0, 1000, 2000, 5000]
labels = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]
In [30]:

# Categorize the spending based on the bins
# Use `pd.cut` on the "Total Students" column of the `per_school_summary` DataFrame.
​
per_school_summary["School Size"] = pd.cut(per_school_summary["Total Students"],bins=size_bins, labels =labels)
per_school_summary
Out[30]:
School Type	Total Students	Total School Budget	Per Student Budget	Average Math Score	Average Reading Score	% Passing Math	% Passing Reading	% Overall Passing	School Size
school_name										
Bailey High School	District	39170	$3,124,928.00	$79.78	77.048432	81.033963	8.470768	10.408476	6.941537	NaN
Cabrera High School	Charter	39170	$1,081,356.00	$27.61	83.061895	83.975780	4.465152	4.603013	4.332397	NaN
Figueroa High School	District	39170	$1,884,411.00	$48.11	76.711767	81.158020	4.968088	6.078632	4.005617	NaN
Ford High School	District	39170	$1,763,916.00	$45.03	77.102592	80.746258	4.776615	5.545060	3.796273	NaN
Griffin High School	Charter	39170	$917,500.00	$23.42	83.351499	83.816757	3.500128	3.640541	3.395456	NaN
Hernandez High School	District	39170	$3,022,020.00	$77.15	77.289752	80.934412	7.898902	9.568547	6.333929	NaN
Holden High School	Charter	39170	$248,087.00	$6.33	83.803279	83.814988	1.008425	1.049272	0.972683	NaN
Huang High School	District	39170	$1,910,635.00	$48.78	76.629414	81.182722	4.891499	6.055655	3.985193	NaN
Johnson High School	District	39170	$3,094,650.00	$79.01	77.072464	80.966394	8.029104	9.872351	6.507531	NaN
Pena High School	Charter	39170	$585,858.00	$14.96	83.839917	84.044699	2.323207	2.356395	2.223641	NaN
Rodriguez High School	District	39170	$2,547,363.00	$65.03	76.842711	80.744686	6.775594	8.189941	5.409752	NaN
Shelton High School	Charter	39170	$1,056,600.00	$26.97	83.359455	83.725724	4.220066	4.309420	4.041358	NaN
Thomas High School	Charter	39170	$1,043,130.00	$26.63	83.418349	83.848930	3.893286	4.061782	3.796273	NaN
Wilson High School	Charter	39170	$1,319,574.00	$33.69	83.274201	83.989488	5.471024	5.626755	5.279551	NaN
Wright High School	Charter	39170	$1,049,400.00	$26.79	83.682222	83.955000	4.288997	4.439622	4.151136	NaN
In [31]:

# Calculate averages for the desired columns. 
size_math_scores = per_school_summary.groupby(["School Size"]).mean()["Average Math Score"]
size_reading_scores = per_school_summary.groupby(["School Size"]).mean()["Average Reading Score"]
size_passing_math = per_school_summary.groupby(["School Size"]).mean()["% Passing Math"]
size_passing_reading = per_school_summary.groupby(["School Size"]).mean()["% Passing Reading"]
size_overall_passing = per_school_summary.groupby(["School Size"]).mean()["% Overall Passing"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/1543097770.py:2: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  size_math_scores = per_school_summary.groupby(["School Size"]).mean()["Average Math Score"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/1543097770.py:3: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  size_reading_scores = per_school_summary.groupby(["School Size"]).mean()["Average Reading Score"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/1543097770.py:4: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  size_passing_math = per_school_summary.groupby(["School Size"]).mean()["% Passing Math"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/1543097770.py:5: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  size_passing_reading = per_school_summary.groupby(["School Size"]).mean()["% Passing Reading"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/1543097770.py:6: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  size_overall_passing = per_school_summary.groupby(["School Size"]).mean()["% Overall Passing"]
In [32]:

# Create a DataFrame called `size_summary` that breaks down school performance based on school size (small, medium, or large).
# Use the scores above to create a new DataFrame called `size_summary`
size_summary = pd.DataFrame({"Average Math Score" : size_math_scores, "Average Reading Score" : size_reading_scores, "% Passing Math" :size_passing_math,
"% Passing Reading" : size_passing_reading, "% Overall Passing" : size_overall_passing})                    
# Display results
size_summary
Out[32]:
Average Math Score	Average Reading Score	% Passing Math	% Passing Reading	% Overall Passing
School Size					
Small (<1000)	NaN	NaN	NaN	NaN	NaN
Medium (1000-2000)	NaN	NaN	NaN	NaN	NaN
Large (2000-5000)	NaN	NaN	NaN	NaN	NaN
Scores by School Type
In [34]:

# Group the per_school_summary DataFrame by "School Type" and average the results.
type_math_scores = per_school_summary.groupby("School Type").mean()
type_reading_scores = per_school_summary.groupby("School Type").mean()
type_passing_math = per_school_summary.groupby("School Type").mean()
type_passing_reading = per_school_summary.groupby("School Type").mean()
type_overall_passing = per_school_summary.groupby("School Type").mean()
​
# Use the code provided to select new column data
average_math_score_by_type = type_math_scores["Average Math Score"]
average_reading_score_by_type = type_reading_scores["Average Reading Score"]
average_percent_passing_math_by_type = type_passing_math["% Passing Math"]
average_percent_passing_reading_by_type = type_passing_reading["% Passing Reading"]
average_percent_overall_passing_by_type = type_overall_passing["% Overall Passing"]
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/3673087474.py:2: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  type_math_scores = per_school_summary.groupby("School Type").mean()
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/3673087474.py:3: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  type_reading_scores = per_school_summary.groupby("School Type").mean()
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/3673087474.py:4: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  type_passing_math = per_school_summary.groupby("School Type").mean()
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/3673087474.py:5: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  type_passing_reading = per_school_summary.groupby("School Type").mean()
/var/folders/df/cg719pr971j5qxlmf3lsdly00000gn/T/ipykernel_45502/3673087474.py:6: FutureWarning: The default value of numeric_only in DataFrameGroupBy.mean is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.
  type_overall_passing = per_school_summary.groupby("School Type").mean()
In [37]:

# Assemble the new data by type into a DataFrame called `type_summary`
type_summary = pd.DataFrame({"Average Math Score": average_math_score_by_type ,
                "Average Reading Score":average_reading_score_by_type,
                "% Passing Math": average_percent_passing_math_by_type,
                "% Passing Reading": average_percent_passing_reading_by_type,
                "% Overall Passing Rate": average_percent_overall_passing_by_type})
​
# Display results
type_summary
Out[37]:
Average Math Score	Average Reading Score	% Passing Math	% Passing Reading	% Overall Passing Rate
School Type					
Charter	83.473852	83.896421	3.646285	3.760850	3.524062
District	76.956733	80.966636	6.544367	7.959809	5.282833



